Grammar

Rule 0: module -> module_stmt_list
Rule 1: module_stmt_list -> module_stmt
Rule 2: module_stmt_list -> module_stmt_list module_stmt
Rule 3: module_stmt -> func_def
Rule 4: module_stmt -> NEWLINE
Rule 5: func_def -> DEF NAME LPAR RPAR COLON func_suite
Rule 6: func_suite -> NEWLINE INDENT func_stmts DEDENT
Rule 7: func_stmts -> func_stmt
Rule 8: func_stmts -> func_stmts func_stmt
Rule 9: func_stmt -> simple_func_stmt NEWLINE
Rule 10: simple_func_stmt -> expr_stmt
Rule 11: expr_stmt -> expr
Rule 12: expr -> expr SUB expr
Rule 13: expr -> expr ADD expr
Rule 14: expr -> expr MUL expr
Rule 15: expr -> expr DIV expr
Rule 16: expr -> NAME
Rule 17: expr -> INT

state 0

	expr : expr SUB expr . 
	expr : expr . ADD expr 
	expr : expr . SUB expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	NEWLINE		reduce using rule 12
	SUB		reduce using rule 12
	MUL		shift and go to state 6
	ADD		reduce using rule 12
	DIV		shift and go to state 4

state 1

	expr : expr MUL expr . 
	expr : expr . DIV expr 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 

	NEWLINE		reduce using rule 14
	SUB		reduce using rule 14
	MUL		shift and go to state 6
	ADD		reduce using rule 14
	DIV		shift and go to state 4

state 2

	expr : expr DIV expr . 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	NEWLINE		reduce using rule 15
	SUB		reduce using rule 15
	MUL		shift and go to state 6
	ADD		reduce using rule 15
	DIV		shift and go to state 4

state 3

	func_stmt : simple_func_stmt NEWLINE . 

	NAME		reduce using rule 9
	INT		reduce using rule 9
	DEDENT		reduce using rule 9

state 4

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : expr DIV . expr 

	INT		shift and go to state 22
	NAME		shift and go to state 25

state 5

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : expr ADD . expr 

	INT		shift and go to state 22
	NAME		shift and go to state 25

state 6

	expr : . NAME 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : . INT 
	expr : . expr DIV expr 
	expr : expr MUL . expr 

	INT		shift and go to state 22
	NAME		shift and go to state 25

state 7

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr SUB expr 
	expr : . expr ADD expr 
	expr : expr SUB . expr 

	INT		shift and go to state 22
	NAME		shift and go to state 25

state 8

	func_def : DEF NAME LPAR RPAR . COLON func_suite 

	COLON		shift and go to state 17

state 9

	func_def : DEF NAME LPAR . RPAR COLON func_suite 

	RPAR		shift and go to state 8

state 10

	expr : . INT 
	func_suite : NEWLINE INDENT func_stmts . DEDENT 
	expr : . expr SUB expr 
	simple_func_stmt : . expr_stmt 
	expr : . NAME 
	expr_stmt : . expr 
	func_stmts : func_stmts . func_stmt 
	expr : . expr DIV expr 
	func_stmt : . simple_func_stmt NEWLINE 
	expr : . expr ADD expr 
	expr : . expr MUL expr 

	NAME		shift and go to state 25
	DEDENT		shift and go to state 31
	INT		shift and go to state 22

state 11

	module_stmt_list : module_stmt_list module_stmt . 

	END		reduce using rule 2
	NEWLINE		reduce using rule 2
	DEF		reduce using rule 2

state 12

	func_def : . DEF NAME LPAR RPAR COLON func_suite 
	module_stmt : . NEWLINE 
	module_stmt_list : . module_stmt_list module_stmt 
	module_stmt_list : . module_stmt 
	module_stmt : . func_def 
	module : . module_stmt_list 

	NEWLINE		shift and go to state 20
	DEF		shift and go to state 14

state 13

	module_stmt : func_def . 

	DEF		reduce using rule 3
	NEWLINE		reduce using rule 3
	END		reduce using rule 3

state 14

	func_def : DEF . NAME LPAR RPAR COLON func_suite 

	NAME		shift and go to state 18

state 15

	module_stmt_list : module_stmt . 

	END		reduce using rule 1
	NEWLINE		reduce using rule 1
	DEF		reduce using rule 1

state 16

	func_def : . DEF NAME LPAR RPAR COLON func_suite 
	module_stmt : . NEWLINE 
	module_stmt : . func_def 
	module : module_stmt_list . 
	module_stmt_list : module_stmt_list . module_stmt 

	NEWLINE		shift and go to state 20
	DEF		shift and go to state 14

state 17

	func_suite : . NEWLINE INDENT func_stmts DEDENT 
	func_def : DEF NAME LPAR RPAR COLON . func_suite 

	NEWLINE		shift and go to state 21

state 18

	func_def : DEF NAME . LPAR RPAR COLON func_suite 

	LPAR		shift and go to state 9

state 19

	expr : expr ADD expr . 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	NEWLINE		reduce using rule 13
	SUB		reduce using rule 13
	MUL		shift and go to state 6
	ADD		reduce using rule 13
	DIV		shift and go to state 4

state 20

	module_stmt : NEWLINE . 

	DEF		reduce using rule 4
	NEWLINE		reduce using rule 4
	END		reduce using rule 4

state 21

	func_suite : NEWLINE . INDENT func_stmts DEDENT 

	INDENT		shift and go to state 24

state 22

	expr : INT . 

	NEWLINE		reduce using rule 17
	SUB		reduce using rule 17
	MUL		reduce using rule 17
	ADD		reduce using rule 17
	DIV		reduce using rule 17

state 23

	func_def : DEF NAME LPAR RPAR COLON func_suite . 

	END		reduce using rule 5
	NEWLINE		reduce using rule 5
	DEF		reduce using rule 5

state 24

	expr : . NAME 
	func_suite : NEWLINE INDENT . func_stmts DEDENT 
	simple_func_stmt : . expr_stmt 
	expr : . INT 
	func_stmts : . func_stmt 
	func_stmts : . func_stmts func_stmt 
	expr : . expr SUB expr 
	expr_stmt : . expr 
	expr : . expr DIV expr 
	func_stmt : . simple_func_stmt NEWLINE 
	expr : . expr ADD expr 
	expr : . expr MUL expr 

	INT		shift and go to state 22
	NAME		shift and go to state 25

state 25

	expr : NAME . 

	NEWLINE		reduce using rule 16
	SUB		reduce using rule 16
	MUL		reduce using rule 16
	ADD		reduce using rule 16
	DIV		reduce using rule 16

state 26

	func_stmts : func_stmt . 

	DEDENT		reduce using rule 7
	INT		reduce using rule 7
	NAME		reduce using rule 7

state 27

	simple_func_stmt : expr_stmt . 

	NEWLINE		reduce using rule 10

state 28

	expr : expr . MUL expr 
	expr : expr . ADD expr 
	expr : expr . DIV expr 
	expr_stmt : expr . 
	expr : expr . SUB expr 

	NEWLINE		reduce using rule 11
	DIV		shift and go to state 4
	ADD		shift and go to state 5
	SUB		shift and go to state 7
	MUL		shift and go to state 6

state 29

	func_stmt : simple_func_stmt . NEWLINE 

	NEWLINE		shift and go to state 3

state 30

	func_stmts : func_stmts func_stmt . 

	DEDENT		reduce using rule 8
	INT		reduce using rule 8
	NAME		reduce using rule 8

state 31

	func_suite : NEWLINE INDENT func_stmts DEDENT . 

	DEF		reduce using rule 6
	NEWLINE		reduce using rule 6
	END		reduce using rule 6


Conflicts (0)

