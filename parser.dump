Grammar

Rule 0: module' -> module
Rule 1: module -> module_stmt_list
Rule 2: module_stmt_list -> module_stmt
Rule 3: module_stmt_list -> module_stmt_list module_stmt
Rule 4: module_stmt -> func_def
Rule 5: module_stmt -> NEWLINE
Rule 6: func_def -> DEF NAME LPAR RPAR COLON func_suite
Rule 7: func_suite -> NEWLINE INDENT func_stmts DEDENT
Rule 8: func_stmts -> func_stmt
Rule 9: func_stmts -> func_stmts func_stmt
Rule 10: func_stmt -> simple_func_stmt
Rule 11: func_stmt -> simple_func_stmt NEWLINE
Rule 12: simple_func_stmt -> expr_stmt
Rule 13: expr_stmt -> expr
Rule 14: expr -> expr SUB expr
Rule 15: expr -> expr ADD expr
Rule 16: expr -> expr MUL expr
Rule 17: expr -> expr DIV expr
Rule 18: expr -> NAME
Rule 19: expr -> INT

state 0

	expr : expr SUB expr . 
	expr : expr . ADD expr 
	expr : expr . SUB expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	DEDENT		reduce using rule 14
	INT		reduce using rule 14
	SUB		reduce using rule 14
	MUL		shift and go to state 5
	NAME		reduce using rule 14
	DIV		shift and go to state 6
	NEWLINE		reduce using rule 14
	ADD		reduce using rule 14

state 1

	expr : expr DIV expr . 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	DEDENT		reduce using rule 17
	INT		reduce using rule 17
	SUB		reduce using rule 17
	MUL		shift and go to state 5
	NAME		reduce using rule 17
	DIV		shift and go to state 6
	NEWLINE		reduce using rule 17
	ADD		reduce using rule 17

state 2

	expr : expr MUL expr . 
	expr : expr . DIV expr 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 

	DEDENT		reduce using rule 16
	INT		reduce using rule 16
	SUB		reduce using rule 16
	MUL		shift and go to state 5
	NAME		reduce using rule 16
	DIV		shift and go to state 6
	NEWLINE		reduce using rule 16
	ADD		reduce using rule 16

state 3

	func_stmts : func_stmts func_stmt . 

	DEDENT		reduce using rule 9
	INT		reduce using rule 9
	NAME		reduce using rule 9

state 4

	func_suite : NEWLINE INDENT func_stmts DEDENT . 

	DEF		reduce using rule 7
	NEWLINE		reduce using rule 7
	END		reduce using rule 7

state 5

	expr : . NAME 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : . INT 
	expr : . expr DIV expr 
	expr : expr MUL . expr 

	INT		shift and go to state 23
	expr		goto state 2
	NAME		shift and go to state 25

state 6

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : expr DIV . expr 

	expr		goto state 1
	INT		shift and go to state 23
	NAME		shift and go to state 25

state 7

	func_stmt : simple_func_stmt NEWLINE . 

	NAME		reduce using rule 11
	INT		reduce using rule 11
	DEDENT		reduce using rule 11

state 8

	func_def : DEF NAME LPAR . RPAR COLON func_suite 

	RPAR		shift and go to state 21

state 9

	module' : module . 

	END		accept 0

state 10

	module_stmt : func_def . 

	DEF		reduce using rule 4
	NEWLINE		reduce using rule 4
	END		reduce using rule 4

state 11

	func_def : DEF . NAME LPAR RPAR COLON func_suite 

	NAME		shift and go to state 19

state 12

	module_stmt_list : module_stmt_list module_stmt . 

	END		reduce using rule 3
	NEWLINE		reduce using rule 3
	DEF		reduce using rule 3

state 13

	func_def : . DEF NAME LPAR RPAR COLON func_suite 
	module_stmt : . NEWLINE 
	module_stmt_list : . module_stmt_list module_stmt 
	module_stmt_list : . module_stmt 
	module_stmt : . func_def 
	module : . module_stmt_list 
	module' : . module 

	module		goto state 9
	module_stmt		goto state 16
	func_def		goto state 10
	module_stmt_list		goto state 29
	NEWLINE		shift and go to state 15
	DEF		shift and go to state 11

state 14

	expr : expr ADD expr . 
	expr : expr . SUB expr 
	expr : expr . ADD expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	DEDENT		reduce using rule 15
	INT		reduce using rule 15
	SUB		reduce using rule 15
	MUL		shift and go to state 5
	NAME		reduce using rule 15
	DIV		shift and go to state 6
	NEWLINE		reduce using rule 15
	ADD		reduce using rule 15

state 15

	module_stmt : NEWLINE . 

	DEF		reduce using rule 5
	NEWLINE		reduce using rule 5
	END		reduce using rule 5

state 16

	module_stmt_list : module_stmt . 

	END		reduce using rule 2
	NEWLINE		reduce using rule 2
	DEF		reduce using rule 2

state 17

	func_suite : . NEWLINE INDENT func_stmts DEDENT 
	func_def : DEF NAME LPAR RPAR COLON . func_suite 

	func_suite		goto state 24
	NEWLINE		shift and go to state 22

state 18

	expr : . NAME 
	expr : . expr DIV expr 
	func_suite : NEWLINE INDENT . func_stmts DEDENT 
	simple_func_stmt : . expr_stmt 
	expr : . INT 
	func_stmts : . func_stmt 
	func_stmts : . func_stmts func_stmt 
	func_stmt : . simple_func_stmt 
	expr : . expr MUL expr 
	expr : . expr SUB expr 
	expr_stmt : . expr 
	func_stmt : . simple_func_stmt NEWLINE 
	expr : . expr ADD expr 

	func_stmt		goto state 26
	INT		shift and go to state 23
	expr_stmt		goto state 27
	func_stmts		goto state 30
	simple_func_stmt		goto state 32
	expr		goto state 28
	NAME		shift and go to state 25

state 19

	func_def : DEF NAME . LPAR RPAR COLON func_suite 

	LPAR		shift and go to state 8

state 20

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr SUB expr 
	expr : . expr ADD expr 
	expr : expr SUB . expr 

	expr		goto state 0
	INT		shift and go to state 23
	NAME		shift and go to state 25

state 21

	func_def : DEF NAME LPAR RPAR . COLON func_suite 

	COLON		shift and go to state 17

state 22

	func_suite : NEWLINE . INDENT func_stmts DEDENT 

	INDENT		shift and go to state 18

state 23

	expr : INT . 

	DEDENT		reduce using rule 19
	INT		reduce using rule 19
	SUB		reduce using rule 19
	MUL		reduce using rule 19
	NAME		reduce using rule 19
	DIV		reduce using rule 19
	NEWLINE		reduce using rule 19
	ADD		reduce using rule 19

state 24

	func_def : DEF NAME LPAR RPAR COLON func_suite . 

	END		reduce using rule 6
	NEWLINE		reduce using rule 6
	DEF		reduce using rule 6

state 25

	expr : NAME . 

	DEDENT		reduce using rule 18
	INT		reduce using rule 18
	SUB		reduce using rule 18
	MUL		reduce using rule 18
	NAME		reduce using rule 18
	DIV		reduce using rule 18
	NEWLINE		reduce using rule 18
	ADD		reduce using rule 18

state 26

	func_stmts : func_stmt . 

	DEDENT		reduce using rule 8
	INT		reduce using rule 8
	NAME		reduce using rule 8

state 27

	simple_func_stmt : expr_stmt . 

	DEDENT		reduce using rule 12
	INT		reduce using rule 12
	NAME		reduce using rule 12
	NEWLINE		reduce using rule 12

state 28

	expr : expr . ADD expr 
	expr_stmt : expr . 
	expr : expr . SUB expr 
	expr : expr . MUL expr 
	expr : expr . DIV expr 

	NEWLINE		reduce using rule 13
	DIV		shift and go to state 6
	NAME		reduce using rule 13
	MUL		shift and go to state 5
	SUB		shift and go to state 20
	INT		reduce using rule 13
	DEDENT		reduce using rule 13
	ADD		shift and go to state 31

state 29

	func_def : . DEF NAME LPAR RPAR COLON func_suite 
	module_stmt : . NEWLINE 
	module_stmt : . func_def 
	module : module_stmt_list . 
	module_stmt_list : module_stmt_list . module_stmt 

	module_stmt		goto state 12
	END		reduce using rule 1
	func_def		goto state 10
	NEWLINE		shift and go to state 15
	DEF		shift and go to state 11

state 30

	expr : . INT 
	expr : . NAME 
	func_suite : NEWLINE INDENT func_stmts . DEDENT 
	func_stmt : . simple_func_stmt 
	expr : . expr MUL expr 
	expr : . expr SUB expr 
	simple_func_stmt : . expr_stmt 
	expr_stmt : . expr 
	func_stmts : func_stmts . func_stmt 
	expr : . expr DIV expr 
	func_stmt : . simple_func_stmt NEWLINE 
	expr : . expr ADD expr 

	func_stmt		goto state 3
	expr_stmt		goto state 27
	expr		goto state 28
	simple_func_stmt		goto state 32
	NAME		shift and go to state 25
	DEDENT		shift and go to state 4
	INT		shift and go to state 23

state 31

	expr : . NAME 
	expr : . INT 
	expr : . expr DIV expr 
	expr : . expr MUL expr 
	expr : . expr ADD expr 
	expr : . expr SUB expr 
	expr : expr ADD . expr 

	expr		goto state 14
	INT		shift and go to state 23
	NAME		shift and go to state 25

state 32

	func_stmt : simple_func_stmt . NEWLINE 
	func_stmt : simple_func_stmt . 

	NAME		reduce using rule 10
	INT		reduce using rule 10
	DEDENT		reduce using rule 10
	NEWLINE		shift and go to state 7


Conflicts (0)

